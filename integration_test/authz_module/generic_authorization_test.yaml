- name: Test Authz generic authorization
  inputs:
    # Get admin addr
    - cmd: printf "12345678\n" | shed keys list --output json | jq ".[] | select (.name==\"admin\")" | jq -r .address
      env: ADMIN_ADDR
    # MSG type "/sheprotocol.shechain.tokenfactory.MsgCreateDenom"
    # create new grantee addr
    - cmd: printf "12345678\ny\n" | shed keys add grantee --output json | jq -r ".address"
      env: GRANTEE_ADDR
    # send some funds to grantee for gas
    - cmd: printf "12345678\n" | shed tx bank send admin $GRANTEE_ADDR 1she --fees 2000ushe -b block -y
    # create an authz grant for tokenfactory create denom
    - cmd: printf "12345678\n" | shed tx authz grant $GRANTEE_ADDR generic --msg-type "/sheprotocol.shechain.tokenfactory.MsgCreateDenom" --from admin --fees 2000ushe -b block -y
    - cmd: uuidgen
      env: TF_UUID
    # create TF create-denom tx and write to json
    - cmd: printf "12345678\n" | shed tx tokenfactory create-denom $TF_UUID --from $ADMIN_ADDR --generate-only > create_denom_tx.json
    # execute the authz tx - we want to validate that this succeeds with code 0
    - cmd: printf "12345678\n" | shed tx authz exec create_denom_tx.json --from $GRANTEE_ADDR -b block -y --fees 2000ushe --output json  | jq -r ".code"
      env: AUTHZ_1_ERROR_CODE
    # verify that the denom exists
    - cmd: shed q tokenfactory denom-authority-metadata factory/$ADMIN_ADDR/$TF_UUID --output json | jq -r ".authority_metadata.admin"
      env: TF_ADMIN
    # verify that the admin is ADMIN_ADDR
  verifiers:
    # verify that error code == 0 for first authz exec
    - type: eval
      expr: AUTHZ_1_ERROR_CODE == 0
    # verify TF metadata is correct
    - type: eval
      expr: TF_ADMIN == ADMIN_ADDR